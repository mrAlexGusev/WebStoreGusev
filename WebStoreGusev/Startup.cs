using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using WebStoreGusev.Infrastructure;
using WebStoreGusev.Infrastructure.Interfaces;
using WebStoreGusev.Infrastructure.Services;

namespace WebStoreGusev
{
    public class Startup
    {
        private readonly IConfiguration configuration;

        public Startup(IConfiguration configuration)
        {
            this.configuration = configuration;
        }
 
        public void ConfigureServices(IServiceCollection services)
        {
            #region Подключение MVC к проекту

            services.AddMvc();

            #endregion
            
            #region Подключение action-фильтра ко всем контроллерам

            //services.AddMvc(options =>
            //{
            //    // 1
            //    options.Filters.Add(typeof(SimpleActionFilter));

            //    // 2 
            //    options.Filters.Add(new SimpleActionFilter());
            //});

            #endregion

            #region Добавляем разрешение зависимости

            // время жизни сервиса - время работы приложения 
            services.AddSingleton<IEmployeesServices, InMemoryEmployeeService>();
            // время жизни сервиса - время одного запроса
            //services.AddScoped<IEmployeesServices, InMemoryEmployeeService>();

            #endregion
        }

        // конвеер выполнения запросов
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            // исползование статических файлов
            app.UseStaticFiles();

            // Метод Map позволяет перехватывать запрос по адресу
            app.Map("/index", CustomIndexHandler);

            app.UseMiddleware<TokenMiddleware>();

            // Метод Use может как прекращать, так и продолжать обработку
            // конвейера запросов
            UseSample(app);

            app.UseRouting();

            #region Работа с файлом конфигурации

            //// Работа с собственной строкой конфигурации
            //var helloMsg = configuration["CustomHelloWorld"];
            //// Работа с составной строкой конфигурации
            //helloMsg = configuration["Logging:LogLevel:Default"];

            //app.UseEndpoints(endpoints =>
            //{
            //    endpoints.MapGet("/", async context =>
            //    {
            //        await context.Response.WriteAsync(helloMsg);
            //    });
            //});

            #endregion

            // app.UseMvcWithDefaultRoute();

            app.UseEndpoints(endpoints =>
            {
                // шаблон пути MVC
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");
                
                #region По умолчанию

                //endpoints.MapGet("/", async context =>
                //{
                //    await context.Response.WriteAsync("Hello World!");
                //});

                #endregion

            });

            app.UseWelcomePage();

            // Метод Run прекращает обработку конвейера запросов
            RunSample(app);
        }

        #region Методы демонстрации Map Run Use

        private void RunSample(IApplicationBuilder app)
        {
            app.Run(async context =>
            {
                await context.Response.WriteAsync("Привет из конвейера обработки запроса (метод app.Run())");
            });
        }

        private void UseSample(IApplicationBuilder app)
        {
            app.Use(async (context, next) =>
            {
                bool isErorr = false;
                // ...
                if (isErorr)
                {
                    await context.Response
                        .WriteAsync("Error occured. You're in custom pipline module...");
                }
                else
                {
                    await next.Invoke();
                }
            });
        }

        private void CustomIndexHandler(IApplicationBuilder app)
        {
            app.Run(async context =>
            {
                await context.Response.WriteAsync("Index");
            });
        }

        #endregion


    }
}

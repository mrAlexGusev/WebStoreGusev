1-23-08 1 урок

Создали веб приложение пустое на коре 3.1

Добавляем строку в аппсетинг джейсон
"CustomHelloWorld": "Hello world from config file."

В стартап цс создадим конструктор и пробросим параметр в сам класс

Прочитаем строку из файла конфигурации
var helloMsg = configuration["CustomHelloWorld"];

Собрал регион работа с файлом конфигурации. Сделал коммит

Подключил мвс в стартап
Добавил папку для контроллеров и первый хоумконтроллер
Создадим вьюшку пкм по имени метода и добавить вьюшку разор (не пустую)
Создадим простую модель

Свяжем контроллер модель и представление
Коммит

Добавил еще один екшн мметод, вьюшку, связал их
Коммит

Для подключения тег хелпера нужно добавить во вьюшку
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

46-37 2 урок

Добавим менеджер клиентских библиотек

В стартап подключаем статические файлы

wwwroot - храниться статитический контент
jquery@2.2.0
twitter-bootstrap@3.3.7

Добавил макет фронта в wwwroot

добавим хоум контроллер и вьюшку

добавим во вью индекс код из индекс аштиэмэль

ctrl+h поиск с заменой
href="css => href="~/css
src="js => src="~/js
href="images => href="~/images
img src="images => img src="~/images

Добавим метод blog  и аналогичную вьюшку

Добаим папку Shared и вьюшку _Layout (Макет Razor)
Свернуть cntl + m + l

В макет добавим весь общий код. В индекс и блог добавим уникальную разметку.
В начале укажем ссылку на макет 
@{ 
    Layout = "_Layout";
}

Добавим изменение заголовка страницы 
ViewData["Title"] = "Главная";
Home | E-Shopper

Создадим вьюшки _ViewImports и _ViewStart
В _ViewStart добавим ссылку на макет и потрем ее в остальных страницах

Во _ViewImports подключаем пространства имен и тег  хелперы

Комитим

В лайаут меняем index.html на
asp-controller="Home" asp-action="Index"

и правим 
img src="images => img src="~/images

Добавим папку Partial в папку представлений хоум
Добавляем вью слайдер и переносим в него разметку из индекс
А в индекс вставляем код 
@await Html.PartialAsync("Partial/_Slider")

Добавим еще одно частичное представление
_LeftSideBar

Заменим в индексе и блоге на 
@await Html.PartialAsync("Partial/_LeftSideBar")

Для лайаута делаем частичное представление хедер

Комит 

ДЗ 2

Добавим частичные представления _FeaturedItems _CategoryTab 
И вытащим в них код из индекса

див контейнер опустили

Из лайаута вытащили футер и добавили возможность подключеня кастомных
стилей и скриптов

Добавляем акшн методы для всех страниц
Добавили ссылки в навигационное меню
-------------------------------------------------------------------------------
Провести рефакторинг. Поправить представления

3 урок

Поигрались с мидлевеар. Рассмотрели юз ран и мап

Создали токен на скидку и добавили в конвейер обработки запросов
Проверка работы (не работы) токена
В любую адресную строку добовляем /?referenceToken=qwe
и выдает неверный токен


В класс эмплойеконтроллер добавим атрибуты роут
Добавил ссылку на котроллер Эмплойе в _хедер

Добавил класс экшн фильтра
С помощью атрибута применил фильтр к классу хоум контроллера

В стартап подключил фильтр ко всем контроллерам


создадим интерфейс для работы с сотрудниками. наследуем его в соответстующем
сервисе. перенесем логику из контроллера сотрудников в сервис

разрешаем зависимость в стартап

добавляем представления эдит

в рефакторинге изменить app.UseWelcomePage(); на app.UseWelcomePage("/welcome");

Из методички добавил удаление сотрудника

урок 4

Серверная валидация (проверка данных)
Осуществляется с помощью атрибутов

Required - атрибут валидации, указывает что поле должно быть обязательно к заполнению
Display - атрибут аннотации.

В класс эмплойвьюмодель добавим атрибуты

Идем в эмплой контроллер и подклюсаем валидацию в пост методе эдит
Идем во вьюшку и добавляем тег хелперы на валидность

Добавляем пример валидации через бизнес логику.

Создаем каталог контроллер и переносим туда методы шоп и продукт детейлс
Создаем в папке вью папку каталог и переносим туда вьюшки шоп и продукт детейлс
Чтобы частичные представления были видны перенесенным вьюшкам - перенесем папку
паршал в папку шаред.
Поправили ссылки во вьюшке _хедер

Создадим библиотеку классов дотнеткор
WebStoreGusev.Domain

Добавим в домейн структуру папок Entities => Base => Interfaces
Добавим интерфейсы IOrderedEntity IBaseEntity INamedEntity в Interfaces
Добавим классы в Base NamedEntity реализующий INamedEntity
BaseEntity => IBaseEntity

В папку Entities => Brand => NamedEntity, IOrderedEntity
Category => NamedEntity, IOrderedEntity

Добавим в основной проект в папку интерфейсов IProductService
и реализуем сервис InMemoryProductService

В стартап внедрим зависимость 

Коммит

Добавим вьюмодель
CategoryViewModel : INamedEntity, IOrderedEntity

Добавим папку ViewComponents и класс CategoriesViewComponent
Добавим папку для представления Components => Categories => View - Default в Шеред
Идем во вьюшку лефтсайдбар и вырезаем хардкод во вьюшку дефолт
а вместо него вставляем 
@await Component.InvokeAsync("Categories")
В дефолт вставляем хардкод подключае к нашей модели и переписываем.
Чтобы работал плюсик href="#@parentCategory.Name.ToLower()" нужен знак #
Подключил категории с помощью тег хелперов. В импортсе прописал
пространство имен а в коде <vc:categories></vc:categories>

Добавляем сущности в домейн Product и ProductFilter
Обновим интерфейс и его реализацию с продуктами.

Добавляем ProductViewModel и CatalogViewModel

Рефакторим CatalogController
Добавляем конструктор с интерфейсом. Переделываем метод Шоп
Идем во вьюшку шоп и делаем ее строго типизированной
Пробрасываем модель во вьюшку Model.Products фъючерайтемс
Теперь во фъючерайтемс делаем строготипизированным

И у нас нихера не работает проверить все добавленное на ошибки
Был скрытый фикс в идекс.хтмл 
 @*@await Html.PartialAsync("Partial/_FeaturedItems")*@
Закоменчина строка

Коммит Товары перенесены в InMemoryProductService

1-49-14
Лезем во вьюшу дефолт и правил ссылки на экшн контроллеры.
Добавляем изменения к предыдущему коммиту

-------------------------------------------------------------------------------

Рефакторинг
Переименовал папку паршал в _паршал и изменить во вьюшках

В папку имадж статических ресурсов докинул недостающие картинки

Создаем вьюмодель для брендов ->
Создаем вьюкомпонент для брендов (нужен метод Invoke или InvokeAsync) ->
Передаем модельку в представление ->
Создаем представление для компонента 
Shared -> Components -> Brands -> Default
Из лефтсайдбара забираем разметку для брендов и подставляем 
одно из двух:
@await Component.InvokeAsync("Brands")
<vc:brands></vc:brands>
Мы молодцы все работает.

-------------------------------------------------------------------------------
Урок 5

ОРМ даппер. нужно попробывать

21-04 

В консоле диспетчера пакетов можно создать новый проект через команду
dotnet new classlib --name WebStoreGusev.DomainNew

Добавить проект в решение
dotnet sln "WebStoreGusev.sln" add "WebStoreGusev.DomainNew/WebStoreGusev.DomainNew.csproj"

Накатим ЕФ на наш домейн

Install-Package Microsoft.EntityFrameworkCore
и Install-Package System.ComponentModel.Annotations

Добавим в BaseEntity аттрибут Кей.
Дополнительный атрибут 
[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
автогенерируемое поле

В классе Brand добавляем атрибут [Table("Brands")] для генерации
таблицы с нужным названием.
Добавляем по аналогии Category Product
Добавляем внешние ключи.

Создаем новый проект WebStoreGusev.DAL
Добавим в него через менеджер пакетов 
Microsoft.EntityFrameworkCore.SqlServer
Microsoft.EntityFrameworkCore.Tools
Microsoft.EntityFrameworkCore.Design

В основном проекте устанавливаем зависимость от дал проекта
Добавим в дал класс WebStoreContext добавим конструктор и таблицы

Подключим зависимость в стартап
Добавим строку подключения в джейсон

"Connectio Strings": {
    "DefaultConnection": "Server=(LocalDB)\\MSSQLLocalDB;Initial Catalog=DbWebStoreGusev;Integrated Security=True;Connect Timeout=30"
  }
Проверить работает или нет
По сути я вытащил строку правильно, но очепятался

Очепятка
Новая конекшен стринг
"ConnectionStrings": {
    "DefaultConnection": "Server=(localdb)\\MSSQLLocalDB;Initial Catalog=DbWebStoreGusev;Trusted_Connection=True;Connection Timeout=30;"
  }

Пробуем создать миграцию
Add-Migration Initial
Добавим пакет Microsoft.EntityFrameworkCore.Design в основной проект

Выполним Update-Database 
В проекте может существовать только одна незавершенная миграция

Поиграемся с миграциями добавим поле в класс продукт
Добавим миграцию Add-Migration AddedProductManufacturer
Remove-Migration удаляем миграцию еще не накатанную на базу

Commit

ДОбавляем класс для инициализации бд в проект ДАЛ DbInitializer
Возьмем данные из памяти и перенесем в инициализацию.

Теперь ломаем класс программ.

Коммит

Пилим новый сервис SqlProductService
Подключаем зависимость в стартап

---------------------------------------------------------------------------------
Методичка 5

Создание нового проекта через консоль.
     тип нового проекта        имя
dotnet new classlib --name WebStore.DomainNew

Подключение проекта через консоль
        текущее решение              подключаемый проект
dotnet sln "WebStore.sln" add "WebStore.DomainNew/WebStore.DomainNew.csproj"

Подключение нагет-пакета через консоль
Install-Package Microsoft.EntityFrameworkCore.SqlServer

Аттрибуты для маппинга

Консольные команды для проекта DAL
dotnet new classlib --name WebStore.DAL
dotnet sln "WebStore.sln" add "WebStore.DAL/WebStore.DAL.csproj"
Перегрузим решение.
Install-Package Microsoft.EntityFrameworkCore.SqlServer
Install-Package Microsoft.EntityFrameworkCore.Tools

Команда для первой миграции
Add-Migration Initial
Команда для применения миграции к базе данных.
Update-Database

---------------------------------------------------------------------------------
Урок 6

В свойствах проекта во вкладке ОТладка убедиться что включена галочка ssl

Устанавливаем на весь проект (солюшен)
Microsoft.AspNetCore.Identity
Microsoft.AspNetCore.Identity.EntityFrameworkCore

В домейне в папке сущности создаем класс User для демонстрации настройки 
пользователей

Идем в вебсторконтекст там изменяем наследование от IdentityDbContext<User>

В стартап подключаем айдентити аутентификацию и авторизацию

Создаем миграцию на проекте ДАЛ
Add-Migration IdentityAdded
Update-Database

Создаем новую вью модель RegisterUserViewModel и LoginViewModel

ДОбавим новый контроллер для регистрации AccountController с методами
Login и Register
Создаем вьюшки

удалим метод логин из хоум контроллера
Перенесем разметку из представления логин хоум контроллера в соответствующие
представления аккаунт контроллера и удалим представление

Сделаем вьюшки типизированными. Поправим их

Редактируем методы аккаунт контроллер.

Пользователь: user user@mail.ru 123456

Коммит

Создадим новый вьюкомпонент LoginLogout
Создаем метод инвок
Создаем представление в папке шеред компонентс
Пишем туда код

В хедер подсуним наш вьюкомпонент
Комитим

---------------------------------------------------------------------------------
Методичка 6

Аутентификация – процесс проверки подлинности.
Авторизация – наделение пользователя системы разрешенными ему правами.

---------------------------------------------------------------------------------
Урок 7

Установим в основной проект пакет BuildBundlerMinifier
для бандлинга (связывания) и минификации

При установки не добавляется файл.
Добавим в ручную файл параметров приложения bundleconfig.json

Компилируем проект. Добавим наши мин файлы в игнор.

Включаем передачу файлов стилей и ждеэс в лайаут страницу
Для отслеживания версии файла 
asp-append-version="true"

Комитим

Делаем роли

В программ пишем новый метод DbInitializer.InitializeUsers(services);
и создаем его черз студию

В дбинициалайзер не хватало 
using Microsoft.Extensions.DependencyInjection;

Поправили логику при регистрации в аккаунт контроллере

Идем в эмплой контроллер. делаем его только 
для авторизованных пользователей.
Сделаем метод индех для анонимных пользователей.
Накиним атрибуты на разные методы 

Переместим в стартап app.UseRouting(); перед авторизацией и аунтификацией 
чтобы не вылазила ошибка.

-----------------
Admin
admin@123
-----------------
user2
qwerty
-----------------
user5
qwerty
-----------------
Поправим представление индекс эмплой контроллера, чтобы скрывать
кнопки
-------------------------------
ДЗ добавить страницу деталей товара
Закоментить оранжевую шторку (оверлей)
Должна быть ссылочка, чтобы мы проваливались по клику товара.
Ссылка на рабочем столе
-------------------------------

Делаем корзину на куках

Добавляем модеель для корзины Cart CartItem CartViewModel
Добавим интерфейс ICartService и реализацию на куках
CookieCartService

Добавим конструктор
IHttpContextAccessor нужен для работы с куками
Реализуем методы.

Идем в стартап и разрешаем зависимость

Создаем новый контроллер для корзины
создаем вьюшку Детейлс и возьмем туда код из вьюшки карт

Для каждой операции в корзине нужен отдельный метод как в интерфейсе.

В детейлс правим хардкод

Идем в фичурайтемс и добавляем ссылки на метод добавить в корзину контроллреа карт.
Идем в хедер и меняем ссылку корзины на детейлс контроллера карт


---------------------------------------------------------------------------------
Методичка 7 

Реализуем страницу просмотра товара

Добавим метод Product GetProductById(int id) в интерфейс IProductService
Реализуем методы в классах SqlProductService InMemoryProductService
Поправим каталог контроллер добавив в него метод ProductDetails(int id)
Сделаем вьюшку строго типизированной ProductDetails

---------------------------------------------------------------------------------
Урок 8

Жадная загрузка в ДЗ через инклуд.

Создаем область Admin 
ПКМ по проекту - Добавить - Создать шаблонный элемент - Область эмвиси

Идем в стартап сиэс и добавляем шаблон пути для эрия админ

Добавляем ресурсы для админки в папку wwwroot
Создаем папку wwwroot/admin
Добавим представления. Скопирум вьюимпорт вьюстарт и лайаут из основного проекта.

Создадим HomeController в админке.
Обозначим атрибут эреа
Создадим вьюшку индекс. Скопируем в нее разметку из шаблона в wwwroot

Добавим второй метод в контроллер и вьюшку к нему ProductList

Перетащим в мастер страницу разметку из индекса. Вырежем нужный кусок
и перетащим его в индекс.

Работаем с мастер страницей. Правим код ссылки на статические ресурсы,
ссылки на методы контроллера.

Добавим доступ к админке.
Реализуем доступ к списку товаров из админки.
Добавим логику в контроллер и вьюшку.

Добавим новый метод криэйт.

Добавим новый контроллер на базе продуктов.
Добавить новый контроллер -> Контроллер МВС с представлениями на базе ЕФ
На базе класса продуктс вебстореконтекст и мастер страницу из ареа админс папки шеред.

Студия сделала нам кучу кода в классе ProductsController и вьюшки к этому коду.

Обновим ссылки в лайауте.

Коммит

Добавляем функцию оформление заказа.

Добавим новые сущности 
OrderItem Order

Добавим новые дбсеты в вебсторконтекст
Добавим миграцию AddedOrders
Add-Migration AddedOrders
Update-Database

Добавим модели OrderViewModel и OrderDetailsViewModel

Добавим новый сервис IOrdersService и его реализацию SqlOrdersService
Идем в CartController пробрасываем новый сервис в конструктор
Изменим метод Details и поменяем модель в представлении.
Добавим новое представление _OrderPartial
Добавим новые методы в контроллеры CheckOut и OrderConfirmed

Разрешаем зависимости в стартап.

Коммит

Добавим возможность просмотра заказов в личном кабинете.
Создаем модель UserOrderViewModel
ДОбавим новый контроллер ProfileController
Сгенерируем вьюшки.
Добавим логику в метод Orders.
Добавим ссылку во вьюшку логинлогаут.

Какая то махинация. Добавим частичный лайаут _ProfileLayout, 
_ProfileMenu заполним их. Заполним индекс и ордерс

Коммит

---------------------------------------------------------------------------------
Методичка 8

Небольшой фикс разметки

